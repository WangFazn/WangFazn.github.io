{"meta":{"title":"王哥·说","subtitle":"Love Coding,Enjoy Life","description":"王哥说","author":"WangGe","url":"http://WangFazn.github.io"},"pages":[{"title":"404 Not Found","date":"2020-02-01T21:33:29.334Z","updated":"2020-02-01T21:33:29.334Z","comments":true,"path":"404.html","permalink":"http://WangFazn.github.io/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 网站正在建设中，精彩很快呈现，敬请期待！"},{"title":"归档","date":"2020-02-02T18:33:42.000Z","updated":"2020-02-02T18:52:36.659Z","comments":true,"path":"archives/index.html","permalink":"http://WangFazn.github.io/archives/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-02-05T14:18:51.780Z","updated":"2020-02-05T14:18:51.780Z","comments":true,"path":"about/index.html","permalink":"http://WangFazn.github.io/about/index.html","excerpt":"","text":""},{"title":"联系","date":"2020-02-02T18:34:09.000Z","updated":"2020-02-02T18:50:58.529Z","comments":true,"path":"contact/index.html","permalink":"http://WangFazn.github.io/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-02-02T17:08:12.000Z","updated":"2020-02-02T17:10:13.306Z","comments":true,"path":"categories/index.html","permalink":"http://WangFazn.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-02-01T17:30:23.404Z","updated":"2019-11-26T09:39:56.000Z","comments":true,"path":"projects/index.html","permalink":"http://WangFazn.github.io/projects/index.html","excerpt":"","text":""},{"title":"kits","date":"2020-02-02T14:23:16.000Z","updated":"2020-02-02T14:23:16.855Z","comments":true,"path":"kits/index.html","permalink":"http://WangFazn.github.io/kits/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-02T17:11:32.000Z","updated":"2020-02-02T17:12:29.666Z","comments":true,"path":"tags/index.html","permalink":"http://WangFazn.github.io/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-02-02T17:17:06.009Z","updated":"2020-02-02T17:17:06.009Z","comments":true,"path":"friends/index.html","permalink":"http://WangFazn.github.io/friends/index.html","excerpt":"","text":"各位大佬来此交换友链哈～ 名称： WangFazn’s blog头像： https://img.vim-cn.com/##.jpg网址： https://wangge.com/blog/标签： 宅男 废材"}],"posts":[{"title":"CentOS 7 基础汇总","slug":"CentOS-7-基础汇总","date":"2020-02-11T11:29:46.000Z","updated":"2020-02-11T11:29:46.725Z","comments":true,"path":"centos-7-ji-chu-hui-zong/","link":"","permalink":"http://WangFazn.github.io/centos-7-ji-chu-hui-zong/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"MacOS下命令行神器：brew","slug":"MacOS下命令行神器：brew","date":"2020-02-11T11:28:53.000Z","updated":"2020-02-11T11:28:53.188Z","comments":true,"path":"macos-xia-ming-ling-xing-shen-qi-brew/","link":"","permalink":"http://WangFazn.github.io/macos-xia-ming-ling-xing-shen-qi-brew/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"iterm2+oh-my-zsh:打造Mac上漂亮又好用的终端","slug":"iterm2-oh-my-zsh-打造Mac上漂亮又好用的终端","date":"2020-02-11T11:27:22.000Z","updated":"2020-02-11T15:37:38.065Z","comments":true,"path":"iterm2-oh-my-zsh-da-zao-mac-shang-piao-liang-you-hao-yong-de-zhong-duan/","link":"","permalink":"http://WangFazn.github.io/iterm2-oh-my-zsh-da-zao-mac-shang-piao-liang-you-hao-yong-de-zhong-duan/","excerpt":"","text":"iterm2+oh-my-zsh：打造Mac上漂亮又好用的终端配置后的效果，看着是不是很炫。 下面进入正题 前言zsh介绍 zsh完全兼容bash zsh具有强大的可定制的特点，支持许多插件，补全功能也很强大 明显缺点是配置麻烦 zsh的一些命令：查看当前使用的shell MacOS默认安装zsh，确认你是否安装过zsh： zsh --version echo $SHELL /bin/bash 查看安装的 shell cat /etc/shells /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh 使用 brew 更新 zsh brew install zsh ==> Downloading https://homebrew.bintray.com/bottles/zsh-5.5.1.high_sierra.bottle.tar.gz ######################################################################## 100.0% ==> Pouring zsh-5.5.1.high_sierra.bottle.tar.gz /usr/local/Cellar/zsh/5.5.1: 1,444 files, 12MB 切换为 zsh chsh -s /bin/zsh 重启终端即可使用 zsh。 所以，就有了神器oh-my-zsh来拯救广大的猿们。 oh-my-zsh安装oh-my-zsh介绍 一款社区驱动的命令行工具，大神汇聚 有许多精美的主题和强大的插件，可定制性强，美观方便 有比bash更强大别名功能，实用高效。 github: https://github.com/ohmyzsh/ohmyzsh 下载安装oh-my-zsh方式一：使用git 这里下载到~/.oh-my-zsh下 git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zs 方式二：使用curl sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 方式三：使用wget sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 接下来备份配置文件，也可直接在usr目录中复制副本 cp ~/.zshrc ~/.zshrc.orig 然后创建一个新的配置文件 cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc 切换默认shell为zsh chsh -s /bin/zsh 最后完成效果，如下： sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" ____ / /_ ____ ___ __ __ ____ _____/ /_ / __ \\/ __ \\ / __ `__ \\/ / / / /_ / / ___/ __ \\ / /_/ / / / / / / / / / / /_/ / / /_(__ ) / / / \\____/_/ /_/ /_/ /_/ /_/\\__, / /___/____/_/ /_/ /____/ ....is now installed! Please look over the ~/.zshrc file to select plugins, themes, and options. p.s. Follow us at https://twitter.com/ohmyzsh. p.p.s. Get stickers and t-shirts at http://shop.planetargon.com. Mac 下隐藏显示隐藏文件 当升级到OS X &gt;=10.9 Mavericks defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder //显示隐藏文件 defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder //不显示隐藏文件 快捷键：在 macOS Sierra，可以使用快捷键⌘⇧.(Command + Shift + .) 来快速（在 Finder 中）显示和隐藏隐藏文件了。 iterm2下载安装方法一：官方网站下载直接安装 官方网站：https://www.iterm2.com/ 下载安装完成后，/bin目录下就会有一个zsh的文件夹，zsh就是一个新的终端，默认带git命令。现在设置zsh为默认终端： chsh -s /bin/zsh 方法二：使用Homebrew安装 brew cask install iterm2 使用brew cask要先安装cask brew install caskroom/cask/brew-cask homebrew-cask与brew的区别： brew是下载源码解压然后./configure &amp;&amp; make install, 并且会自动配置好环境变量。 brew cask主要用于有GUI的软件，下载已经编译好的应用包(.dmg/.pkg)。 更换iterm2的主题为Dracula1、下载iterm2的Dracula主题 git clone https://github.com/dracula/iterm.git 设置主题： iTerm2 &gt; Preferences &gt; Profiles &gt; Colors Tab Open the Color Presets 从列表中选择import 选择刚才下载主题中Dracula.itermcolors 文件，确定 再次打开Color Presets… ，选择Dracula 安装powerline字体git clone https://github.com/powerline/fonts.git --depth=1 进入字体目录，安装所需字体： cd fonts ./install.sh cd .. rm -rf fonts 或者，直接使用命令行安装 pip install powerline-status --user 打开iTerm2，按照路径打开：iTerm2 –&gt; Preferences –&gt; Profiles –&gt; text，找到Font处修改。 安装PowerFonts安装字体库需要首先将项目 git clone 至本地，然后执行源码中的install.sh。 # git clone git clone https://github.com/powerline/fonts.git --depth=1 # cd to folder cd fonts # run install shell ./install.sh 安装好字体库之后，设置iTerm2的字体，具体的操作： iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text， 在 Font 区域选中 Change Font，然后找到 Meslo LG 字体。有L、M、S可选，看个人喜好。 修改配色方案最新的iterm 中默认安装了Solarized Dark Higher Contrast配色方案，所以打开iTerm2，按照路径打开：iTerm2 –&gt; Preferences –&gt; Profiles –&gt; color可做修改。 更换背景更换背景图片方式：iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; BackGround Image勾选图片即可。 oh-my-zsh主题配置主题一：random终端运行vim命令或在usr中直接打开.zshrc文件编辑 vim ~/.zshrc # Path to your oh-my-zsh installation. export ZSH=\"/Users/yourname/.oh-my-zsh\" # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes # ZSH_THEME=\"robbyrussell\" ZSH_THEME=random # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause 配置项 ZSH_THEME 即为 oh-my-zsh 的主题配置。当设置为 ZSH_THEME=random 时，每次打开终端都会使用一种随机的主题。更多主题见oh-my-zsh的主题列表。 最后，更新配置source ~/.zshrc 主题二：/powerlevel9k1、主题下载，并导入oh-my-zsh的themes文件夹中： git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k 2、修改配置文件~/.zshrc ZSH_THEME=\"powerlevel9k/powerlevel9k\" 3、更新配置文件 source ~/.zshrc 轻度定制：默认的powerlevel9k主题最右侧显示的元素为：每条命令的执行状态，历史命令条数，当前时间，这样也比较冗余。我在这里将 历史命令条数 这一元素去掉，这样看起来比较简洁。这需要修改 ~/.zshrc 配置文件，在后面追加如下内容，定制该主题的显示元素。 修改配置文件~/.zshrc： #设置 oh-my-zsh powerlevel9k 主题左边元素显示 POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir rbenv vcs) #设置 oh-my-zsh powerlevel9k 主题右边元素显示 POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs time) 主题三：Dracula1、下载主题文件 $ git clone https://github.com/dracula/zsh.git 2、创建一个指向Oh my zsh主题文件夹的符号链接 DRACULA_THEME是你刚才下载主题的目录 $ ln -s $DRACULA_THEME/dracula.zsh-theme ~/.oh-my-zsh/themes/dracula.zsh-theme 3、修改zsh主题。编辑usr下.zshrc文件，修改ZSH_THEME为 $ vim ~/.zshrc ZSH_THEME=\"dracula\" 4、最后，更新配置文件 source ~/.zshrc 主题四：powerline下载安装powerline官网：https://powerline.readthedocs.io/en/latest/installation.html里面有详细的安装设置 1、下载主题 powerline-theme git clone git://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme 下载完后安装主题，执行目录下的脚本install.sh，将主题 powerline.zsh-theme 放入 ~/.oh-my-zsh/themes/ 内 sudo ./oh-my-zsh-powerline-theme/install.sh 2、安装主题所需要的字体，否则会乱码 git clone https://github.com/powerline/fonts.git sudo ./fonts/install.sh 3、找到“文本-&gt;&gt;字体-&gt;&gt;更改” ，”所有字体”中选中“ Meslo LG M for powerLine“ 字体 4、设置oh my zsh 配置文件 vim ~/.zshrc //vim 编辑 zshrc 配置文件 修改文件此处需要用到vim命令，此处不做演示或者用一个自己熟悉的编辑器打开这个文件，可以找到这一项：ZSH_THEME ZSH_THEME=\"robbyrussel\" plugins=(git autojump osx brew node npm) 最后保存，重启终端命令行即可看到powerLine 主题。 oh-my-zsh必备插件汇总插件一：incr自动补全插件下载 incr 自动补全插件，并将插件放在 oh-my-zsh 自定义插件目录中. 在 /.oh-my-zsh/plugins 中添加 incr文件夹，并拷入文件incr-0.2.zsh，然后在配置文件结束添加： source $ZSH/custom/plugins/incr/incr*.zsh 最后，更新配置文件 source ~/.zshrc 实现效果，如官网所示： 插件二：命令提示插件 zsh-autosuggestions实现效果:输入g会出现相应提示，按↑即可补全 步骤如下： 下载命令提示插件 编辑配置文件，使用插件 添加配置文件 sudo git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions vim ~/.zshrc source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh 插件三：语法高亮显示zsh-syntax-highlighting插件可以使终端输入的命令有语法高亮效果，修改～/zshrc配置文件： git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting 在配置文件中查找设置plugins的行，并添加插件. 注意：zsh-syntax-highlighting 必须放在最后面（官方推荐）* plugins=( git ...... ........ zsh-syntax-highlighting ) # 添加以下内容到文件末 source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 最后，更新配置文件 source ~/.zshrc 本文参考网站如下，很是感谢： iTerm2 + Oh My Zsh 打造舒适终端体验 利用iTerm2+oh-my-zsh+Dracula主题打造我的Mac终端利器 打造Mac上漂亮又好用的终端-iterm2 + Oh my Zsh +主题和配色方案","categories":[],"tags":[{"name":"iterm2","slug":"iterm2","permalink":"http://WangFazn.github.io/blog/tags/iterm2/"},{"name":"oh-my-zsh","slug":"oh-my-zsh","permalink":"http://WangFazn.github.io/blog/tags/oh-my-zsh/"},{"name":"zsh","slug":"zsh","permalink":"http://WangFazn.github.io/blog/tags/zsh/"},{"name":"Mac","slug":"Mac","permalink":"http://WangFazn.github.io/blog/tags/Mac/"}]},{"title":"Markdown在线编辑器MdEditor","slug":"Markdown在线编辑器MdEditor","date":"2020-02-06T15:58:24.000Z","updated":"2020-02-06T16:27:19.011Z","comments":true,"path":"markdown-zai-xian-bian-ji-qi-mdeditor/","link":"","permalink":"http://WangFazn.github.io/markdown-zai-xian-bian-ji-qi-mdeditor/","excerpt":"","text":"Markdown在线编辑器 MdEditor 介绍转载Markdown是一种轻量级的「标记语言」 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md” MdEditor是一个在线编辑Markdown文档的编辑器MdEditor扩展了Markdown的功能（如表格、脚注、内嵌HTML等等），以使让Markdown转换成更多的格式，和更丰富的展示效果，这些功能原初的Markdown尚不具备。 Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc，Pandao；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。 MdEditor源于Pandao的JavaScript开源项目，开源地址Editor.md，并在MIT开源协议的许可范围内进行了优化，以适应广大用户群体的需求。向优秀的markdown开源编辑器原作者Pandao致敬。 MdEditor的功能列表演示标题样式# 标题H1 ## 标题H2 ### 标题H3 #### 标题H4 ##### 标题H5 ###### 标题H5 标题H1标题H2标题H3标题H4标题H5标题H5h1 标题H1 === h2 标题h2 --- h1 标题H1h2 标题h2字符效果和横线等 ~~删除线~~ 删除线（开启识别HTML标签时） 删除线 删除线（开启识别HTML标签时） *斜体字* _斜体字_ **粗体** __粗体__ ***粗斜体*** ___粗斜体___ 上标：X2，下标：O2 斜体字 斜体字 粗体 粗体 粗斜体 粗斜体 上标：X2，下标：O2 缩写(同HTML的abbr标签) 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启 The &lt;abbr title=\"Hyper Text Markup Language\">HTML&lt;/abbr> specification is maintained by the &lt;abbr title=\"World Wide Web Consortium\">W3C&lt;/abbr>. The HTML specification is maintained by the W3C. 引用 Blockquotes&gt; 引用文本 Blockquotes 引用文本 Blockquotes 引用的行内混合 Blockquotes 引用：如果想要插入空白换行即&lt;br /&gt;标签，在插入处先键入两个以上的空格然后回车即可，普通链接。 锚点与链接 Links普通链接普通链接带标题直接链接：https://www.mdeditor.com[锚点链接][anchor-id][anchor-id]: https://www.mdeditor.com/mailto:test.test@gmail.comGFM a-tail link @pandao邮箱地址自动链接 test.test@gmail.com www@vip.qq.com @pandao 多语言代码高亮 Codes行内代码 Inline code执行命令：npm install marked 缩进风格即缩进四个空格，也做为实现类似 &lt;pre&gt; 预格式化文本 ( Preformatted Text ) 的功能。 &lt;?php echo &quot;Hello world!&quot;; ?&gt; 预格式化文本： | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | JS代码function test() { console.log(\"Hello world!\"); } HTML 代码 HTML codes&lt;!DOCTYPE html> &lt;html> &lt;head> &lt;mate charest=\"utf-8\" /> &lt;meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" /> &lt;title>Hello world!&lt;/title> &lt;style type=\"text/css\"> body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style> &lt;/head> &lt;body> &lt;h1 class=\"text-xxl\">Hello world!&lt;/h1> &lt;p class=\"text-green\">Plain text&lt;/p> &lt;/body> &lt;/html> 图片 Images图片加链接 (Image + Link)： Follow your heart. 列表 Lists无序列表（减号）Unordered Lists (-) 列表一 列表二 列表三 无序列表（星号）Unordered Lists (*) 列表一 列表二 列表三 无序列表（加号和嵌套）Unordered Lists (+) 列表一 列表二 列表二-1 列表二-2 列表二-3 列表三 列表一 列表二 列表三 有序列表 Ordered Lists (-) 第一行 第二行 第三行 GFM task list- [x] GFM task list 1 - [x] GFM task list 2 - [ ] GFM task list 3 - [ ] GFM task list 3-1 - [ ] GFM task list 3-2 - [ ] GFM task list 3-3 - [ ] GFM task list 4 - [ ] GFM task list 4-1 - [ ] GFM task list 4-2 GFM task list 1 GFM task list 2 GFM task list 3 GFM task list 3-1 GFM task list 3-2 GFM task list 3-3 GFM task list 4 GFM task list 4-1 GFM task list 4-2 绘制表格 Tables| 项目 | 价格 | 数量 | | -------- | -----: | :----: | | 计算机 | $1600 | 5 | | 手机 | $12 | 12 | | 管线 | $1 | 234 | 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell First Header Second Header Content Cell Content Cell Content Cell Content Cell | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | First Header Second Header Content Cell Content Cell Content Cell Content Cell | Function name | Description | | ------------- | ------------------------------ | | `help()` | Display the help window. | | `destroy()` | **Destroy your computer!** | Function name Description help() Display the help window. destroy() Destroy your computer! | Left-Aligned | Center Aligned | Right Aligned | | :------------ |:---------------:| -----:| | col 3 is | some wordy text | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 | Item | Value | | --------- | -----:| | Computer | $1600 | | Phone | $12 | | Pipe | $1 | Item Value Computer $1600 Phone $12 Pipe $1 特殊符号 HTML Entities Codes&amp;copy; &amp; &amp;uml; &amp;trade; &amp;iexcl; &amp;pound; &amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14; &amp;times; &amp;divide; &amp;raquo; 18&amp;ordm;C &amp;quot; &amp;apos; &copy; &amp; &uml; &trade; &iexcl; &pound; &amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 18&ordm;C &quot; &apos; [========] Emoji表情 :smiley: Blockquotes :star: GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and &lt;del>tags&lt;/del> supported :editormd-logo:; - [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:; - [x] [ ] :smiley: this is a complete item :smiley:; - [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; - [ ] [ ]this is an incomplete item :fa-star: :fa-gear:; - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:; - [ ] :smiley: this is :fa-star: :fa-gear: an incomplete item [test link](#); :smiley: @mentions, :smiley: #refs, links, formatting, and tags supported :editormd-logo:; list syntax required (any unordered or ordered list supported) :editormd-logo-3x:; [ ] :smiley: this is a complete item :smiley:; []this is an incomplete item test link :fa-star: @pandao; [ ]this is an incomplete item :fa-star: :fa-gear:; :smiley: this is an incomplete item test link :fa-star: :fa-gear:; :smiley: this is :fa-star: :fa-gear: an incomplete item test link; 反斜杠 Escape*literal asterisks* [========] 科学公式 TeX(KaTeX)$$E=mc^2$$$$E=mc^2$$ 行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。 $$x > y$$ $$\\(\\sqrt{3x-1}+(1+x)^2\\)$$ $$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$ $$x &gt; y$$ $$(\\sqrt{3x-1}+(1+x)^2)$$ $$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$ 多行公式： \\displaystyle \\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2 \\leq \\left( \\sum\\_{k=1}^n a\\_k^2 \\right) \\left( \\sum\\_{k=1}^n b\\_k^2 \\right) \\displaystyle \\frac{1}{ \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{ \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} { 1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi 分页符 Page break Print Test: Ctrl + P [========] 绘制流程图 Flowchartst=>start: 用户登陆 op=>operation: 登陆操作 cond=>condition: 登陆成功 Yes or No? e=>end: 进入后台 st->op->cond cond(yes)->e cond(no)->op [========] 绘制序列图 Sequence DiagramAndrew->China: Says Hello Note right of China: China thinks\\nabout it China-->Andrew: How are you? Andrew->>China: I am good thanks! End","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://WangFazn.github.io/blog/tags/Markdown/"},{"name":"MdEditor","slug":"MdEditor","permalink":"http://WangFazn.github.io/blog/tags/MdEditor/"},{"name":"转载","slug":"转载","permalink":"http://WangFazn.github.io/blog/tags/转载/"}]},{"title":"Markdown学习资源汇总","slug":"Markdown学习资源汇总","date":"2020-02-06T11:28:04.000Z","updated":"2020-02-06T12:57:52.740Z","comments":true,"path":"markdown-xue-xi-zi-yuan-hui-zong/","link":"","permalink":"http://WangFazn.github.io/markdown-xue-xi-zi-yuan-hui-zong/","excerpt":"","text":"Markdown语法相关网站 Markdown中文文档 Markdown教程 Markdown入门指南 DARING FIREBALL Markdown工具– window平台 Markdownpad MarkPad – Linux平台 ReText – Mac Mou Ulysses Byword iA Writer Pro – iOS Drafts Day One iA Writer – WEB端在线编辑器 Markdown在线编辑 简书 Markable.in Dillinger.io– 浏览器插件 MaDe(Chrome) – android – 高级应用(Sublime Text 2 + MarkdownEditing 教程) Sublime Text 2 MarkdownEditing—Better Markdown editing for Sublime Text 2 MarkdownEditing教程—Sublime Text 2 的 Markdown 利器","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://WangFazn.github.io/blog/tags/Markdown/"},{"name":"学习资源","slug":"学习资源","permalink":"http://WangFazn.github.io/blog/tags/学习资源/"}]},{"title":"博客图片素材：图片占位符","slug":"博客图片素材：图片占位符","date":"2020-02-06T09:23:41.000Z","updated":"2020-02-11T15:44:48.117Z","comments":true,"path":"bo-ke-tu-pian-su-cai-tu-pian-zhan-wei-fu/","link":"","permalink":"http://WangFazn.github.io/bo-ke-tu-pian-su-cai-tu-pian-zhan-wei-fu/","excerpt":"","text":"图片点位符placeholder.com Placehold.jp Lorem Picsum Lorem Picsum 可以说是图片版的乱数假文，这个名字就已经很直白了。主要特点：这款工具包含了大量高素质的图片，多种显示模式，并且是完全免费的。满足绝大多数设计师对于占位符的需求。工作原理：基于你的设计需求，创建规范，你所需要做的就是将代码插入到网页对应的位置即可。代码片段将会使得页面加载的时候直接从工具的数据库当中调取图片，而其中的图片素材绝大多数都来自顶级免费图片库 Unsplash，无需安装和下载。 ImgPlaceholder Place Kitten 免费图库pickpik 美国大都会博物馆(The Metropolitan Museum of Art) 纽约公共图书馆（New York Public Library, NYPL）","categories":[],"tags":[{"name":"学习素材","slug":"学习素材","permalink":"http://WangFazn.github.io/blog/tags/学习素材/"},{"name":"图片点位符","slug":"图片点位符","permalink":"http://WangFazn.github.io/blog/tags/图片点位符/"}]},{"title":"Markdown语法简介","slug":"Markdown语法简介","date":"2020-02-05T17:48:17.000Z","updated":"2020-02-06T13:09:26.821Z","comments":true,"path":"markdown-yu-fa-jian-jie/","link":"","permalink":"http://WangFazn.github.io/markdown-yu-fa-jian-jie/","excerpt":"","text":"Markdown是一种轻量级的「标记语言」 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md” 概览宗旨 Markdown 的目标是实现「易读易写」。兼容 HTML Markdown 语法的目标是：成为一种适用于网络的书写语言。 Markdown 的理念是，能让文档更容易读、写和随意改。 HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样， Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 例子如下，在 Markdown 文件里加上一段 HTML 表格： Foo Doo Foo Coo Foo Voo 这是一个普通段落。 Foo Doo Foo Coo Foo Voo 这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的强调会没有效果。 特殊字符自动转换Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。 版权符号©，你可以这样写：&amp;copy;Markdown 会保留它不动。而若你写：AT&amp;T ,Markdown 就会将它转为：AT&amp;amp;T 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1This is an H2This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： 这是 H1这是 H2这是 H3这是 H4这是 H5这是 H6# 这是 H1 ## 这是 H2 ### 这是 H3 #### 这是 H4 ##### 这是 H5 ###### 这是 H6 区块引用Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.`markdownThis is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.`区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： This is the first level of quoting. This is nested blockquote. Back to the first level. This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); ## 这是一个标题。 1. 这是第一行列表项。 2. 这是第二行列表项。 给出一些例子代码： return shell_exec(\"echo $input | $markdown_script\"); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： Red Green Blue * Red * Green * Blue 等同于： + Red + Green + Blue 也等同于： - Red - Green - Blue 有序列表则使用数字接着一个英文句点： Bird McHale Parish`markdown Bird McHale Parish`很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：BirdMcHaleParish Bird McHale Parish 如果你的列表标记写成： 1. Bird 1. McHale 1. Parish 或甚至是： 3. Bird 1. McHale 8. Parish 代码区块这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell Here is an example of AppleScript: tell application \"Foo\" beep end tell 会被转换为： &lt;p>Here is an example of AppleScript:&lt;/p> &lt;pre>&lt;code>tell application \"Foo\" beep end tell &lt;/code>&lt;/pre> 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： &copy; 2004 Foo Corporation &lt;div class=\"footer\"> &amp;copy; 2004 Foo Corporation &lt;/div> 会被转换为： &lt;div class=\"footer\"&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 区段元素 (内联元素)链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 行内式的链接:要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： This is an example inline link.This link has no title attribute. This is [an example](http://example.com/ \"Title\") inline link. [This link](http://example.net/) has no title attribute. 会产生： &lt;p>This is &lt;a href=\"http://example.com/\" title=\"Title\"> an example&lt;/a> inline link.&lt;/p> &lt;p>&lt;a href=\"http://example.net/\">This link&lt;/a> has no title attribute.&lt;/p> 如果你是要链接到同样主机的资源，你可以使用相对路径：See my About page for details. See my [About](/about/) page for details. 参考式的链接:参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This is an example reference-style link. This is [an example][id]reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： [id]: http://example.com/ \"Optional Title Here\" 下面是一个参考式链接的范例： I get 10 times more traffic from Google than fromYahoo or MSN. I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ \"Google\" [2]: http://search.yahoo.com/ \"Yahoo Search\" [3]: http://search.msn.com/ \"MSN Search\" 如果改成用链接名称的方式写： I get 10 times more traffic from Google than fromYahoo or MSN. I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ \"Google\" [yahoo]: http://search.yahoo.com/ \"Yahoo Search\" [msn]: http://search.msn.com/ \"MSN Search\" 上面两种写法都会产生下面的 HTML。 I get 10 times more traffic from Google than from Yahoo or MSN. 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： I get 10 times more traffic from Googlethan from Yahoo orMSN. I get 10 times more traffic from [Google](http://google.com/ \"Google\") than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or [MSN](http://search.msn.com/ \"MSN Search\"). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调Markdown 使用星号（）和底线（_）作为标记强调字词的符号，被 或 _ 包围的字词会被转成用\\标签包围，用两个 * 或 _ 包起来的话，则会被转成\\，例如： single asterisks single underscores double asterisks double underscores *single asterisks* _single underscores_ **double asterisks** __double underscores__ 会转成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间：unfriggingbelievable un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： \\*this text is surrounded by literal asterisks\\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the printf() function. Use the `printf()` function. 会产生： &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt; 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： There is a literal backtick (`) here. ``There is a literal backtick (`) here.`` 这段语法会产生： &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 会产生： &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt; 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don’t use any &lt;blink&gt; tags. Please don&#39;t use any `&lt;blink&gt;` tags. 转为： &lt;p&gt;Please don&#39;t use any &lt;code&gt;&lt;blink&gt;&lt;/code&gt; tags.&lt;/p&gt; 你也可以这样写： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 以产生： &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式的图片语法：行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) ![图片占位符](https://via.placeholder.com/150) ![图片占位符](https://via.placeholder.com/350x150) ![图片占位符](https://via.placeholder.com/350x65) ![](https://via.placeholder.com/200x100 &quot;图片占位符&quot;) ![](https://via.placeholder.com/140x100 &quot;图片占位符&quot;) 参考式的图片语法：参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 \\ 标签。 其它反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠：* literal asterisks * Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\*literal asterisks\\* \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：http://example.com &lt;http://example.com> Markdown会转为： &lt;a href=\"http://example.com/\">http://example.com/&lt;/a> 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&#97;&#x64;&#x64;&#x72;&#x65;&#115;&#x73;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109; &lt;address@example.com> Markdown 会转成： &lt;a href=\"mailto:address@example.com\">address@example.com&lt;/a>","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://WangFazn.github.io/blog/tags/Markdown/"},{"name":"文档","slug":"文档","permalink":"http://WangFazn.github.io/blog/tags/文档/"}]},{"title":"Markdown语法简介","slug":"Markdown语法详解","date":"2020-02-05T17:48:17.000Z","updated":"2020-02-06T15:56:58.852Z","comments":true,"path":"markdown-yu-fa-xiang-jie/","link":"","permalink":"http://WangFazn.github.io/markdown-yu-fa-xiang-jie/","excerpt":"","text":"导读Markdown是一种轻量级的「标记语言」 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md” 它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于去年（2013年1月11日）自杀，有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 为什么要使用Markdown？ 它是易读、易写、易更改纯文本。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。 快速发布个人博客。 概览宗旨Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 兼容 HTMLMarkdown 语法的目标是：成为一种适用于网络的书写语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如\\、\\、\\、\\ 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的\\标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： Foo Doo Foo Coo Foo Voo 这是一个普通段落。 Foo Doo Foo Coo Foo Voo 这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的强调会没有效果。 HTML 的区段（行内）标签如\\、\\、\\ 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的\\或\\标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。 &amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到： http://images.google.com/images?num=30&q=larry+bird 你必须要把网址转换写为： http://images.google.com/images?num=30&amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。 所以你如果要在文档中插入一个版权符号©，你可以这样写：&amp;copy;Markdown 会保留它不动。而若你写：AT&amp;T ，Markdown 就会将它转为：AT&amp;amp;T。 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 4 &lt; 5 Markdown 将会把它转换为：4 &amp;lt; 5 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素（块级元素）段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 \\ 标签。 如果你确实想要依赖 Markdown 来插入\\ 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生\\ ，但是简单地「每个换行都转换为\\」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1This is an H2This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： 这是 H1这是 H2这是 H3这是 H4这是 H5这是 H6# 这是 H1 ## 这是 H2 ### 这是 H3 #### 这是 H4 ##### 这是 H5 ###### 这是 H6 区块引用Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse > id sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.`markdownThis is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.`区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： This is the first level of quoting. This is nested blockquote. Back to the first level. This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); ## 这是一个标题。 1. 这是第一行列表项。 2. 这是第二行列表项。 给出一些例子代码： return shell_exec(\"echo $input | $markdown_script\"); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： Red Green Blue * Red * Green * Blue 等同于： + Red + Green + Blue 也等同于： - Red - Green - Blue 有序列表则使用数字接着一个英文句点： Bird McHale Parish`markdown Bird McHale Parish`很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：BirdMcHaleParish Bird McHale Parish 如果你的列表标记写成： 1. Bird 1. McHale 1. Parish 或甚至是： 3. Bird 1. McHale 8. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你懒，那也行： Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用\\ 标签包起来，举例来说： * Bird * Magic 会被转换为： &lt;ul> &lt;li>Bird&lt;/li> &lt;li>Magic&lt;/li> &lt;/ul> 但是这个： * Bird * Magic 会被转换为： &lt;ul> &lt;li>&lt;p>Bird&lt;/p>&lt;/li> &lt;li>&lt;p>Magic&lt;/p>&lt;/li> &lt;/ul> 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： This is a list item with two paragraphs. Lorem ipsum dolorsit amet, consectetuer adipiscing elit. Aliquam hendreritmi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreetvitae, risus. Donec sit amet nisl. Aliquam semper ipsumsit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.`markdown This is a list item with two paragraphs. Lorem ipsum dolorsit amet, consectetuer adipiscing elit. Aliquam hendreritmi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreetvitae, risus. Donec sit amet nisl. Aliquam semper ipsumsit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.`如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： * This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： A list item with a blockquote: This is a blockquoteinside a list item.`markdown A list item with a blockquote: This is a blockquoteinside a list item.如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：markdown 一列表项包含一个列表区块： &lt;代码写在这&gt; `当然，项目列表很可能会不小心产生，像是下面这样的写法 What a great season.`markdown What a great season.换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。 ```markdown 1986\\. What a great season. 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用\\ 和\\ 标签来把代码区块包起来。要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： &lt;p>这是一个普通段落：&lt;/p> &lt;pre>&lt;code>这是一个代码区块。 &lt;/code>&lt;/pre> 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell Here is an example of AppleScript: tell application \"Foo\" beep end tell 会被转换为： &lt;p>Here is an example of AppleScript:&lt;/p> &lt;pre>&lt;code>tell application \"Foo\" beep end tell &lt;/code>&lt;/pre> 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： &copy; 2004 Foo Corporation &lt;div class=\"footer\"> &amp;copy; 2004 Foo Corporation &lt;/div> 会被转换为： &lt;div class=\"footer\"&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 区段元素 (内联元素)链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 行内式的链接:要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： This is an example inline link.This link has no title attribute. This is [an example](http://example.com/ \"Title\") inline link. [This link](http://example.net/) has no title attribute. 会产生： &lt;p>This is &lt;a href=\"http://example.com/\" title=\"Title\"> an example&lt;/a> inline link.&lt;/p> &lt;p>&lt;a href=\"http://example.net/\">This link&lt;/a> has no title attribute.&lt;/p> 如果你是要链接到同样主机的资源，你可以使用相对路径：See my About page for details. See my [About](/about/) page for details. 参考式的链接:参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This is an example reference-style link. This is [an example][id]reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： [id]: http://example.com/ \"Optional Title Here\" 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着. 下面这三种链接的定义都是相同： //这个默认是不显示的 [foo]: http://example.com/ \"Optional Title Here\" [foo]: http://example.com/ 'Optional Title Here' [foo]: http://example.com/ (Optional Title Here) 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用尖括号包起来： [id]: &lt;http://example.com> \"Optional Title Here\" 你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看： [id]: http://example.com/longish/path/to/resource/here \"Optional Title Here\" 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的： [link text][a] [link text][A] 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： google 然后定义链接内容： [Google][] 然后定义链接内容： [Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词： Visit [Daring Fireball][] for more information. 然后接着定义链接 [Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： I get 10 times more traffic from Google than fromYahoo or MSN. I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ \"Google\" [2]: http://search.yahoo.com/ \"Yahoo Search\" [3]: http://search.msn.com/ \"MSN Search\" 如果改成用链接名称的方式写： I get 10 times more traffic from Google than fromYahoo or MSN. I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ \"Google\" [yahoo]: http://search.yahoo.com/ \"Yahoo Search\" [msn]: http://search.msn.com/ \"MSN Search\" 上面两种写法都会产生下面的 HTML。 I get 10 times more traffic from Google than from Yahoo or MSN. 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： I get 10 times more traffic from Googlethan from Yahoo orMSN. I get 10 times more traffic from [Google](http://google.com/ \"Google\") than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or [MSN](http://search.msn.com/ \"MSN Search\"). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调Markdown 使用星号（）和底线（_）作为标记强调字词的符号，被 或 _ 包围的字词会被转成用\\标签包围，用两个 * 或 _ 包起来的话，则会被转成\\，例如： single asterisks single underscores double asterisks double underscores *single asterisks* _single underscores_ **double asterisks** __double underscores__ 会转成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间：unfriggingbelievable un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： \\*this text is surrounded by literal asterisks\\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the printf() function. Use the `printf()` function. 会产生： &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt; 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： There is a literal backtick (`) here. ``There is a literal backtick (`) here.`` 这段语法会产生： &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 会产生： &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt; 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don’t use any &lt;blink&gt; tags. Please don&#39;t use any `&lt;blink&gt;` tags. 转为： &lt;p&gt;Please don&#39;t use any &lt;code&gt;&lt;blink&gt;&lt;/code&gt; tags.&lt;/p&gt; 你也可以这样写： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 以产生： &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。 Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式的图片语法：行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) ![图片占位符](https://via.placeholder.com/150) ![图片占位符](https://via.placeholder.com/350x150) ![图片占位符](https://via.placeholder.com/350x65) ![](https://via.placeholder.com/200x100 &quot;图片占位符&quot;) ![](https://via.placeholder.com/140x100 &quot;图片占位符&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式的图片语法：参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 \\ 标签。 其它反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠：* literal asterisks * Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\*literal asterisks\\* \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：http://example.com &lt;http://example.com> Markdown会转为： &lt;a href=\"http://example.com/\">http://example.com/&lt;/a> 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&#x61;&#100;&#100;&#x72;&#x65;&#115;&#x73;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d; &lt;address@example.com> Markdown 会转成： &lt;a href=\"mailto:address@example.com\">address@example.com&lt;/a>","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://WangFazn.github.io/blog/tags/Markdown/"},{"name":"文档","slug":"文档","permalink":"http://WangFazn.github.io/blog/tags/文档/"}]},{"title":"hexo 博客框架 链接","slug":"hexo-博客框架-链接","date":"2020-02-05T15:22:01.000Z","updated":"2020-02-11T15:49:49.911Z","comments":true,"path":"hexo-bo-ke-kuang-jia-lian-jie/","link":"","permalink":"http://WangFazn.github.io/hexo-bo-ke-kuang-jia-lian-jie/","excerpt":"","text":"hexo 一个快速、简洁且高效的博客框架超快速度： Node.js所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持 Markdown：hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署： 只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。 插件和可扩展性： 强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成","categories":[],"tags":[]},{"title":"CAD应用技巧之左手键","slug":"CAD应用技巧之左手键","date":"2020-02-05T14:59:04.000Z","updated":"2020-02-06T14:41:41.298Z","comments":true,"path":"cad-ying-yong-ji-qiao-zhi-zuo-shou-jian/","link":"","permalink":"http://WangFazn.github.io/cad-ying-yong-ji-qiao-zhi-zuo-shou-jian/","excerpt":"","text":"","categories":[],"tags":[{"name":"CAD","slug":"CAD","permalink":"http://WangFazn.github.io/blog/tags/CAD/"},{"name":"应用技巧","slug":"应用技巧","permalink":"http://WangFazn.github.io/blog/tags/应用技巧/"},{"name":"打印设置","slug":"打印设置","permalink":"http://WangFazn.github.io/blog/tags/打印设置/"}]},{"title":"CAD应用技巧之打印设置”","slug":"CAD应用技巧之打印设置”","date":"2020-02-05T14:57:25.000Z","updated":"2020-02-05T15:02:10.233Z","comments":true,"path":"cad-ying-yong-ji-qiao-zhi-da-yin-she-zhi/","link":"","permalink":"http://WangFazn.github.io/cad-ying-yong-ji-qiao-zhi-da-yin-she-zhi/","excerpt":"","text":"","categories":[],"tags":[{"name":"CAD","slug":"CAD","permalink":"http://WangFazn.github.io/blog/tags/CAD/"},{"name":"应用技巧","slug":"应用技巧","permalink":"http://WangFazn.github.io/blog/tags/应用技巧/"},{"name":"打印设置","slug":"打印设置","permalink":"http://WangFazn.github.io/blog/tags/打印设置/"}]},{"title":"hell hexo","slug":"hello hexo","date":"2020-02-05T14:28:25.000Z","updated":"2020-02-11T15:46:30.747Z","comments":true,"path":"hello-hexo/","link":"","permalink":"http://WangFazn.github.io/hello-hexo/","excerpt":"","text":"hexo.sh 一个方便管理与发布hexo博客的脚本。 material-x 一个简约的卡片式Hexo博客主题。 img.vim-cn.com是一个十分干净好用的图床，本站以及博客中的所有图片都是使用的这个图床。 所以，这是一个快速批量上传图片的脚本。 This is a image test post.","categories":[],"tags":[]}]}